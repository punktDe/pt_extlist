####################################################
# Definition of filter prototypes for use in listconfiguration
#
# @author Daniel Lienert <lienert@punkt.de> Michael Knoll <knoll@punkt.de>
# @package Typo3
# @subpackage pt_extlist
####################################################

plugin.tx_ptextlist.prototype.filter {

	staticValue {
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_StaticValueFilter
		partialPath = Filter/Special/StaticValue
		filterValue =
		filterIdentifier =
		label =
		description =
		fieldIdentifier =
		filterField =
	}



	string {
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_StringFilter
		partialPath = Filter/String/StringFilter

		label =
		description =

		exactMatch = 0
		orToken =
		andToken =

		defaultValue =
		accessGroups =

		maxLength = 
		size = 

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} equals {field:value}
		}
	}



    fullText {
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_FullTextFilter
		partialPath = Filter/String/StringFilter
		defaultValue =
		accessGroups =

		label =
		description =

        # MySQL Specific Parameters
        minWordLength = 4
        booleanMode = 0
        booleanModeWrapWithStars = 1

		maxLength =
		size =

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = Searchstring: {field:value}
		}
	}



	max {
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_MaxFilter
		partialPath = Filter/Range/MaxFilter
		defaultValue =
		accessGroups =

		label =
		description =

		#validation.maxValue = 500
		#validation.minValue = 0

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used here are 'label', 'value', 'minValue' and 'maxValue' (if there are set before!)
			dataWrap = {field:label} is less than {field:value}
		}
	}



	min {
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_MinFilter
		partialPath = Filter/Range/MinFilter
		defaultValue =
		accessGroups =

		label =
		description =

		#validation.maxValue = 500
		#validation.minValue = 0

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used here are 'label', 'value', 'minValue' and 'maxValue' (if there are set before!)
			dataWrap = {field:label} is bigger than {field:value}
		}
	}



	dateSelectList {
	    filterClassName = Tx_PtExtlist_Domain_Model_Filter_DateSelectListFilter
	    dataProviderClassName = Tx_PtExtlist_Domain_Model_Filter_DataProvider_DateIterator
	    partialPath = Filter/Options/SelectFilter

		label =
		description =

	    dateIteratorStart =
	    dateIteratorEnd =
	    dateIteratorIncrement = m
	    dateIteratorFormat = %m.%Y

        dbTimeFormat = U

	    defaultValue {
		    start =
		    end =
		}

        #fieldIdentifier {
        #    10 {
        #        start =
        #        end =
        #    }
        #}

        accessGroups =

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used here are 'label', 'value', 'minValue' and 'maxValue' (if there are set before!)
			dataWrap = {field:label} is between {field:fromValue} and {field:toValue}
		}
	}



    datePicker {
        filterClassName = Tx_PtExtlist_Domain_Model_Filter_DatePickerFilter
        dataProviderClassName = Tx_PtExtlist_Domain_Model_Filter_DataProvider_Dates
        partialPath = Filter/Date/DatePickerFilter

		label =
		description =

		dbTimeFormat = U
		regional =

		options {

		}

		#fieldIdentifier {
        #    10 {
        #        start =
        #        end =
        #    }
        #}

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} equals {field:value}
		}
    }



    dateRange {
        filterClassName = Tx_PtExtlist_Domain_Model_Filter_DateRangeFilter
        partialPath = Filter/Range/DateRangeFilter

		label =
		description =

		displayValueDateFormat = d.m.Y
		dbTimeFormat = U
		regional =

		options {

		}

		#fieldIdentifier =

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} equals {field:value}
		}
    }



	select {
		partialPath = Filter/Options/SelectFilter
		ajaxPartialPath = Filter/Ajax/Options/SelectFilter

		filterClassName = Tx_PtExtlist_Domain_Model_Filter_SelectFilter
		#dataProviderClassName =
		defaultValue =
		filterIdentifier =

		label =
		description =

		fieldIdentifier =
		displayFields =
		filterField =

		multiple = 0
		excludeFilters =
		showRowCount = 1
		submitOnChange = 0
		inactiveOption =
		inactiveValue =
		invert = 0
		invertable = 0
		accessGroups =

		ajax {
			enable = 1
			registerToFilter = filterbox.filterIdentifier
		}

		renderObj = TEXT
		renderObj {
			dataWrap = {field:allDisplayFields} ({field:rowCount})
		}

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} contains {field:value}
		}
	}


	treeSelect {
		partialPath = Filter/Options/TreeSelectFilter
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_TreeSelectFilter
		#dataProviderClassName =
		defaultValue =
		filterIdentifier =
		displayFields =
		fieldIdentifier =

		label =
		description =

		multiple = 0
		excludeFilters =
		showRowCount = 1
		submitOnChange = 0
		inactiveOption =
		inactiveValue =
		invert = 0
		invertable = 0
		accessGroups =

		treeNodeRepository =
		treeNamespace =
		treeMaxDepth =
		treeRootNode =

		renderObj = TEXT
		renderObj {
			dataWrap = ({field:rowCount})
		}

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} contains {field:value}
		}
	}


	checkbox {
		partialPath = Filter/Options/CheckBoxFilter
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_OptionsFilter
		#dataProviderClassName =

		# defaultValues are defined as array 10 = value, 20 = value or single value 20
		defaultValue =

		filterIdentifier =

		label =
		description =

		fieldIdentifier =
		displayFields =
		filterField =
		excludeFilters =
		showRowCount = 1
		submitOnChange = 0
		inactiveOption =
		inactiveValue =
		invert = 0
		invertable = 0
		accessGroups =

		renderObj = TEXT
		renderObj {
			dataWrap = {field:allDisplayFields} ({field:rowCount})
		}

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} contains {field:value}
		}
	}
	


	button {
		partialPath = Filter/Options/ButtonFilter
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_OptionsFilter
		#dataProviderClassName =

		# defaultValues are defined as array 10 = value, 20 = value or single value 20
		defaultValue =

		filterIdentifier =

		label =
		description =

		fieldIdentifier =
		displayFields =
		filterField =
		excludeFilters =
		showRowCount = 0
		inactiveOption =
		inactiveValue =
		invert = 0
		invertable = 0
		accessGroups =

		renderObj = TEXT
		renderObj {
			dataWrap = {field:allDisplayFields}
		}

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} contains {field:value}
		}
	}

	link < .button
	link {
		partialPath = Filter/Options/LinkFilter
	}

	radiobutton {
		partialPath = Filter/Options/RadioButtonFilter
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_OptionsFilter
		#dataProviderClassName =

		# defaultValues are defined as array 10 = value, 20 = value or single value 20
		defaultValue =

		filterIdentifier =

		label =
		description =

		fieldIdentifier =
		displayFields =
		filterField =
		excludeFilters =
		showRowCount = 1
		submitOnChange = 0
		inactiveOption =
		inactiveValue =
		invert = 0
		invertable = 0
		accessGroups =

		renderObj = TEXT
		renderObj {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:allDisplayFields} ({field:rowCount})
		}

		breadCrumbString = TEXT
		breadCrumbString {
			dataWrap = {field:label} equals {field:value}
		}
	}



	firstLetter {
		partialPath = Filter/Options/FirstLetterFilter
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_FirstLetterFilter
		dataProviderClassName = Tx_PtExtlist_Domain_Model_Filter_DataProvider_FirstLetter

		defaultValue =

		# addLettersIfMissing = A,B,C,D,E,F,G,H,I,J,K,L,N,M,O,P,Q,R,S,T,U,V,W,X,Y,Z

		filterIdentifier =

		label =
		description =

		fieldIdentifier =
		displayFields =
		filterField =
		excludeFilters =
		showRowCount = 0
		inactiveOption = [ALL]
		inactiveValue =
		invert = 0
		invertable = 0
		accessGroups =

		renderObj = TEXT
		renderObj {
			dataWrap = {field:firstLetter}
		}

		breadCrumbString = TEXT
		breadCrumbString {
			# Fields that can be used are 'label' and 'value'
			dataWrap = {field:label} starts with '{field:value}'
		}
	}



	tagCloud {
		partialPath = Filter/Options/TagCloudFilter
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_TagCloudFilter
		dataProviderClassName = Tx_PtExtlist_Domain_Model_Filter_DataProvider_TagCloud
				
		filterIdentifier =

		label =
		description =

		fieldIdentifier =
		countFieldIdentifier = 
		
		maxItems = 20
		
		minColor = #1c448d
		maxColor = #b8cffa
		
		# minSize / maxSize as fontSize in pixel 
		minSize = 9
		maxSize = 24
		
		renderObj = TEXT
		renderObj {
			dataWrap = {field:allDisplayFields}
		}
	}



	proxy {
		filterClassName = Tx_PtExtlist_Domain_Model_Filter_ProxyFilter
		partialPath = Filter/Special/ProxyFilter
		proxyPath = 
		fieldIdentifier =
		hidden = 1
	}
}
