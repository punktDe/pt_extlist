<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE DOC [

	<!ELEMENT DOC (DATATYPES,TSREF)>
	<!ELEMENT DATATYPES (ENTRY*)>
	<!ELEMENT TSREF (ENTRY)+>
	<!ELEMENT ENTRY (DESCRIPTION, DATATYPE*, POSIBLEVALUES*, DEFAULT*, COBJ*, PROTOTYPE*, EXAMPLE*, CHILDREN*, VARIANT* )>
	<!ELEMENT DESCRIPTION  (#PCDATA)>
	<!ELEMENT DATATYPE (#PCDATA)>
	<!ELEMENT PROTOTYPE (#PCDATA)>
	<!ELEMENT COBJ (#PCDATA)>
	<!ELEMENT EXAMPLE (#PCDATA)>
	<!ELEMENT DEFAULT (#PCDATA)>
	<!ELEMENT POSIBLEVALUES (#PCDATA)>
	<!ELEMENT CHILDREN (ENTRY*,TYPEREF*)>
	<!ELEMENT TYPEREF (#PCDATA)>
	<!ELEMENT VARIANT (ENTRY*)>

	<!ATTLIST ENTRY KEY CDATA #REQUIRED>
	<!ATTLIST ENTRY REF CDATA #IMPLIED>
	<!ATTLIST TYPEREF KEY CDATA #REQUIRED>
	<!ATTLIST TYPEREF REF CDATA #REQUIRED>

]>

<DOC>

	<DATATYPES>

		<ENTRY REF="pager.pagerClassName" KEY="pagerClassName">
			<DESCRIPTION>Name of the PHP Class of this pager.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE>pagerClassName = DefaultPager</EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="pager.templatePath" KEY="templatePath">
			<DESCRIPTION>Name of the template class for this pager.</DESCRIPTION>
			<DATATYPE>String Path</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE>templatePath = EXT:pt_extlist/Resources/Private/Templates/Pager/Default.html</EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="pager.enabled" KEY="enabled">
			<DESCRIPTION>Indicates if this pager is enabled.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="pager.showFirstLink" KEY="showFirstLink">
			<DESCRIPTION>Indicates if the firstLink is shown.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="pager.showPreviousFilter" KEY="showPreviousFilter">
			<DESCRIPTION>Indicates if the previousLink is shown.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="pager.showLastLink" KEY="showLastLink">
			<DESCRIPTION>Indicates if the firstLink is shown.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="pager.showNextLink" KEY="showNextLink">
			<DESCRIPTION>Indicates if the nextLink is shown.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>

		<ENTRY REF="filter.filterIdentifier" KEY="filterIdentifier">
			<DESCRIPTION>The unique identifier of this filter.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.label" KEY="label">
			<DESCRIPTION>The label which is displayed beside the filter.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.description" KEY="description">
			<DESCRIPTION>An optional description string, that describes the filters functions.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.defaultValue" KEY="defaultValue">
			<DESCRIPTION>The default value which is shown or selected by default.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE><![CDATA[
// Selects key 3 as default Value
defaultValue = 3

// Selects multiple values in a multi value	filter (3 and 18)
defaultValue {
	10 = 3
	20 = 18
}

// Selects current user as default in an user select list
defaultValue.cObject = TEXT
defaultValue.cObject.data = TSFE:fe_user|user|username
			]]></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.accessGroups" KEY="accessGroups">
			<DESCRIPTION>Comma separated list of user groups wich have access to this filter.</DESCRIPTION>
			<DATATYPE>Comma eparated list.</DATATYPE>
			<POSIBLEVALUES>TYPO3 Group Ids</POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.fieldIdentifier" KEY="fieldIdentifier">
			<DESCRIPTION>WARNING: Which one to choose??? Identifier of a defined data field. The filter affects on this data field. If more than on fieldIdentifier is given, the resulting query is linked with or. Either a single identifier of a defined field, a comma separated list of identifiers or '*' to use all defined fields.</DESCRIPTION>
			<DATATYPE>fieldIdentifier or *</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE><![CDATA[
// use a single field
fieldIdentifier = cn_short_local

// use a list of fields
fieldIdentifier = cn_short_local, name_local

// use every defined field
fieldIdentifier = *
			]]></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.filterClassName" KEY="filterClassName">
			<DESCRIPTION>Name of the PHP Class of this filter.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE>Tx_PtExtlist_Domain_Model_Filter_StringFilter</EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.partialPath" KEY="partialPath">
			<DESCRIPTION></DESCRIPTION>
			<DATATYPE></DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.invert" KEY="invert">
			<DESCRIPTION>Invert the constraint of this filter.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>0</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.invertable" KEY="invertable">
			<DESCRIPTION>Show a controle to invert this filter.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>0</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.renderObj" KEY="renderObj">
			<DESCRIPTION>A cObject definition to render every selct option. With {field:FIELDNAME} you can accedd all display Fields. Additional the implicit defined fields [allDisplayFields] for all defined displayFields and [rowCount] for the count of the entrys with this option  are possible.</DESCRIPTION>
			<DATATYPE>String (cObject)</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT><![CDATA[
renderObj {
	dataWrap = {field:allDisplayFields} ({field:rowCount})
}
			]]></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.displayFields" KEY="displayFields">
			<DESCRIPTION>One or multiple identifiers of previously defined data fields.</DESCRIPTION>
			<DATATYPE>String / Comma separated list</DATATYPE>
			<POSIBLEVALUES>Previously defined field indentifier.</POSIBLEVALUES>
			<DEFAULT>If not set, the field defined in fieldIdentifier is used.</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.multiple" KEY="multiple">
			<DESCRIPTION></DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>0</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.excludeFilters" KEY="excludeFilters">
			<DESCRIPTION>List of filters that are not considered for the group query of this filter.</DESCRIPTION>
			<DATATYPE>String / Comma separated list of filterIdentifiers.</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.showRowCount" KEY="showRowCount">
			<DESCRIPTION>Show the row count if the select filter is filled with grouped data.

Info for use with MySQL Backend
In case this list is grouped by any field, showRowCount also implies the following manipulation to the original list query:
1. ShowRowCount is activated, In this case we have to build the list first and then use this list as source to calculate the selectable rows and the count. This has the drawback, that options are not displayed, if grouped within the list.
2. ShowRowCount is not activated: In this case, we exchange the original grouping fields with the fields needed by the filter.

            </DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>1</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.submitOnChange" KEY="submitOnChange">
			<DESCRIPTION>Instant submit filter if a value is selected.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>0</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.resetToDefaultValue" KEY="resetToDefaultValue">
			<DESCRIPTION>If a default value for a filter is set in TypoScript, the filter will be set to this value if it is resetted. If this is set to 0, the filter will be resetted to an empty value.</DESCRIPTION>
			<DATATYPE>Boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>0</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.inactiveOption" KEY="inactiveOption">
			<DESCRIPTION>Label of an option that is added to the select list. If this option is selected, the filter is inactive.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.inactiveValue" KEY="inactiveValue">
			<DESCRIPTION>The submitted value for the inactiveOption described above.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.breadCrumbString" KEY="breadCrumbString">
			<DESCRIPTION>Defines the string that is shown as breadcrumb for the filter. You can use '%v' for the filter's value and '%l' for the filter's label.</DESCRIPTION>
			<DATATYPE>String</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE>breadCrumbString = %l equals '%v'</EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.hidden" KEY="hidden">
			<DESCRIPTION>Hide the filter completely from the filterBox (don't render any output). This can be used in filters like the proxy filter or any filter that is only set via the extlistContext PHP methods.</DESCRIPTION>
			<DATATYPE>boolean</DATATYPE>
			<POSIBLEVALUES>0,1</POSIBLEVALUES>
			<DEFAULT>0</DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE></EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
		<ENTRY REF="filter.options" KEY="options">
			<DESCRIPTION>Defines explicit options to display in a data filter. If options are set, no data is fetched from the database. There are to variants to define the data. See the example for details.</DESCRIPTION>
			<DATATYPE>array</DATATYPE>
			<POSIBLEVALUES></POSIBLEVALUES>
			<DEFAULT></DEFAULT>
			<COBJ></COBJ>
			<PROTOTYPE></PROTOTYPE>
			<EXAMPLE>
# There are two variants to define the data

# Variant 1: Simple key / value
options {
	checkedin = Someone Checked in
	noonecheckedin = LLL:EXT:pt_ext/Resources/Private/Language/locallang_db.xml:tx_ext_domain_model_downloads.facility
}

# Variant 2: Use integer keys to define option order and subKeys key / value to define the options
10 {
	key = 1
	value = LLL:EXT:my_ext/locallang.xml:theLabelOfTheOption
}
20 {
	...
}
			</EXAMPLE>
			<CHILDREN></CHILDREN>
			<VARIANT></VARIANT>
		</ENTRY>
</DATATYPES>



	<TSREF>
		<ENTRY KEY="plugin.tx_ptextlist.settings">
			<DESCRIPTION>Main TS-key for all pt_extlist settings.</DESCRIPTION>
			<CHILDREN>
				<ENTRY KEY="listConfig">
					<DESCRIPTION>Holds configuration for all list identifiers configured by array key.</DESCRIPTION>
					<DATATYPE>Associative Array (listIdentifier => listConfiguration)</DATATYPE>
					<EXAMPLE><![CDATA[
plugin.tx_ptextlist.settings {

	listConfig {
		listIdentifier1 {

			# Here goes the configuration for your first list
			...
		}

		listIdentifier2 {

			# Here goes the configuration for your second list
			...
		}

		# Feel free to add more lists...
		...
	}
}]]></EXAMPLE>
					<CHILDREN>
						<ENTRY KEY="base">
							<DESCRIPTION>Basic settings for pt_extlist</DESCRIPTION>
							<DATATYPE></DATATYPE>
							<POSIBLEVALUES></POSIBLEVALUES>
							<DEFAULT></DEFAULT>
							<COBJ></COBJ>
							<PROTOTYPE></PROTOTYPE>
							<EXAMPLE></EXAMPLE>
							<CHILDREN>
								<ENTRY KEY="uncachedSessionStorageAdapter">
									<DESCRIPTION>Define the session storage adapter that should be used in uncached mode. Posible values are the classes described below or any other class that implements the interface Tx_PtExtbase_State_Session_Storage_AdapterInterface.</DESCRIPTION>
									<DATATYPE>String</DATATYPE>
									<POSIBLEVALUES><![CDATA[
Tx_PtExtbase_State_Session_Storage_SessionAdapter: Default browser session storage adapter.
Tx_PtExtbase_State_Session_Storage_FeUserSessionAdapter: TYPO3 fe_user bases session storage.
]]></POSIBLEVALUES>
									<DEFAULT>Tx_PtExtbase_State_Session_Storage_SessionAdapter</DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN></CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="cachedSessionStorageAdapter">
									<DESCRIPTION>Define the session storage adapter that should be used in cached mode. Posible values are the classes described below or any other class that implements the interface Tx_PtExtbase_State_Session_Storage_AdapterInterface.</DESCRIPTION>
									<DATATYPE>String</DATATYPE>
									<POSIBLEVALUES><![CDATA[
Tx_PtExtlist_Domain_StateAdapter_Storage_NullStorageAdapter: Hold every session variable as GET parameters in the URL. Use this adapter if you want to use realURL.
Tx_PtExtlist_Domain_StateAdapter_Storage_DBStorageAdapter: Save the session variables into the database and add an identifier for this db-entry to the GET variables. Use this adapter if you want to handle many parameters and keep the URL length constant.
]]></POSIBLEVALUES>
									<DEFAULT>Tx_PtExtlist_Domain_StateAdapter_Storage_NullStorageAdapter</DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN></CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="resetOnEmptySubmit">
									<DESCRIPTION>By setting this to "1", a list will be reset if there is no GP-Vars-Data for current request. You can use this, if you want a list to be in its default state every time you open the page on which the list is inserted.</DESCRIPTION>
									<DATATYPE>Boolean</DATATYPE>
									<POSIBLEVALUES>1,0</POSIBLEVALUES>
									<DEFAULT>0</DEFAULT>
								</ENTRY>
							</CHILDREN>
							<VARIANT></VARIANT>
						</ENTRY>
						<ENTRY KEY="[yourListId]">
							<DESCRIPTION>Holds configuration for a single list identifier. This is where the main part of your list configuration has to be set up.</DESCRIPTION>
							<EXAMPLE><![CDATA[
plugin.tx_ptextlist.settings {

	listConfig {
		demolist_mysql_01 {

			backendConfig < plugin.tx_ptextlist.prototype.backend.mysql
			backendConfig {
				...
			}

			fields {
				...
			}

			columns {
				...
			}

			filters {
				...
			}

			pager {
				...
			}
		}
	}
}
							]]></EXAMPLE>
							<CHILDREN>
								<ENTRY KEY="default">
									<DESCRIPTION>List default values.</DESCRIPTION>
									<DATATYPE></DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="sortingColumn">
											<DESCRIPTION>The default sorting column while no other sorting ist set. Direction can be set with DESC or ASC after the column identifier.</DESCRIPTION>
											<DATATYPE>String</DATATYPE>
											<POSIBLEVALUES>Any column identifier</POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE><![CDATA[
// use capital as default sorting column in ascending order
sortingColumn = capital

// use capital as default sorting column in descending order
sortingColumn = capital	DESC

											]]></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
									</CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
                                <ENTRY KEY="cacheRendering">
                                    <DESCRIPTION>Set to 1 if you want to cache rendering of cells. Can slow down list creation, if values are all different and caching makes no sense.</DESCRIPTION>
                                    <DATATYPE>Boolean</DATATYPE>
                                    <POSIBLEVALUES></POSIBLEVALUES>
                                    <DEFAULT></DEFAULT>
                                    <COBJ></COBJ>
                                    <PROTOTYPE></PROTOTYPE>
                                    <EXAMPLE></EXAMPLE>
                                    <CHILDREN></CHILDREN>
                                    <VARIANT></VARIANT>
                                </ENTRY>
                                <ENTRY KEY="useIterationListData">
                                    <DESCRIPTION>If set to 1 the iterationListData is used instead of the default listData. While the listData provides an array of all data fetched from the database, which is then mapped and rendered completely, the iterationListData fetches, maps and renders a single row at a time. This has the big advantage, that only the memory for a single row object is consumed and only a constant amount of memory is needed, independent from the amoutn of rows. The disadvantage is, that a renderer is only able to process one single row, which makes it impossible to compute an aggregate on the fetched data.</DESCRIPTION>
                                    <DATATYPE>Boolean</DATATYPE>
                                    <POSIBLEVALUES></POSIBLEVALUES>
                                    <DEFAULT>1</DEFAULT>
                                    <COBJ></COBJ>
                                    <PROTOTYPE></PROTOTYPE>
                                    <EXAMPLE></EXAMPLE>
                                    <CHILDREN></CHILDREN>
                                    <VARIANT></VARIANT>
                                </ENTRY>
								<ENTRY KEY="backendConfig">
									<DESCRIPTION>Holds the configuration for the data backend to be used with this configuration. Configurable values depend on
									individual backend, e.g. TYPO3-Backend, MySQL-Backen, ExtBase-Backend etc.</DESCRIPTION>

									<VARIANT>

										<ENTRY KEY="backendConfig.mysql">
											<DESCRIPTION>Backend configuration for connecting to native MySQL databases. DSN needs to be configured.</DESCRIPTION>
											<PROTOTYPE>plugin.tx_ptextlist.prototype.backend.mysql</PROTOTYPE>
											<EXAMPLE><![CDATA[
backendConfig {

	dataSource {
		username = t3ry21ptldev
		password = xxxxxx
		databaseName = t3ry21ptldev
	}

	tables (
		City,
		Country
	)

	baseFromClause (
		Country
		INNER JOIN City ON City.CountryCode = Country.Code
		INNER JOIN CountryLanguage ON CountryLanguage.CountryCode = Country.Code
	)

	baseWhereClause (
	)

	baseGroupByClause (
		Country.Code, City.ID
	)
}
]]></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="datasource">
													<DESCRIPTION>Defines datasource for (MySQL) data backend.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
dataSource {
	host = mysql.db.hoster.tld
	username = funnyrabbit
	password = xxxxxxx
	databaseName = rabbitsdatabase
}
]]></EXAMPLE>
													<CHILDREN>
														<ENTRY KEY="host">
															<DESCRIPTION>Defines hostname of mysql database server.</DESCRIPTION>
															<DATATYPE>String</DATATYPE>
															<POSIBLEVALUES>All valid addresses for servers (IP-Addresses and URLs)</POSIBLEVALUES>
															<DEFAULT>localhost</DEFAULT>
															<COBJ></COBJ>
															<PROTOTYPE></PROTOTYPE>
															<EXAMPLE></EXAMPLE>
															<CHILDREN></CHILDREN>
															<VARIANT></VARIANT>
														</ENTRY>
														<ENTRY KEY="port">
															<DESCRIPTION>Port number on which MySQL database server is listening.</DESCRIPTION>
															<DATATYPE>Int</DATATYPE>
															<POSIBLEVALUES>Any valid port number</POSIBLEVALUES>
															<DEFAULT>3306</DEFAULT>
															<COBJ></COBJ>
															<PROTOTYPE></PROTOTYPE>
															<EXAMPLE></EXAMPLE>
															<CHILDREN></CHILDREN>
															<VARIANT></VARIANT>
														</ENTRY>
														<ENTRY KEY="databaseName">
															<DESCRIPTION>Name of database to be used for connection.</DESCRIPTION>
															<DATATYPE>String</DATATYPE>
															<POSIBLEVALUES>Any valid database name</POSIBLEVALUES>
															<DEFAULT></DEFAULT>
															<COBJ></COBJ>
															<PROTOTYPE></PROTOTYPE>
															<EXAMPLE></EXAMPLE>
															<CHILDREN></CHILDREN>
															<VARIANT></VARIANT>
														</ENTRY>
														<ENTRY KEY="username">
															<DESCRIPTION>Username to be used for database connection.</DESCRIPTION>
															<DATATYPE>String</DATATYPE>
															<POSIBLEVALUES>Valid username for MySQL connection.</POSIBLEVALUES>
															<DEFAULT></DEFAULT>
															<COBJ></COBJ>
															<PROTOTYPE></PROTOTYPE>
															<EXAMPLE></EXAMPLE>
															<CHILDREN></CHILDREN>
															<VARIANT></VARIANT>
														</ENTRY>
														<ENTRY KEY="password">
															<DESCRIPTION>Password to be used for database connection.</DESCRIPTION>
															<DATATYPE>String</DATATYPE>
															<POSIBLEVALUES>Any valid password.</POSIBLEVALUES>
															<DEFAULT></DEFAULT>
															<COBJ></COBJ>
															<PROTOTYPE></PROTOTYPE>
															<EXAMPLE></EXAMPLE>
															<CHILDREN></CHILDREN>
															<VARIANT></VARIANT>
														</ENTRY>
													</CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>

												<ENTRY KEY="baseFromClause">
													<DESCRIPTION>Holds the FROM clause of a mysql query without the FROM keyword.</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>1</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
static_countries
LEFT JOIN static_territories AS	st_subcontinent	ON (static_countries.cn_parent_tr_iso_nr = st_subcontinent.tr_iso_nr)
													]]></EXAMPLE>
												</ENTRY>

												<ENTRY KEY="baseWhereClause">
													<DESCRIPTION>Holds the WHERE clause of a mysql query without the WHERE keyword.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>1</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
# Example using cObject
baseWhereClause.cObject = COA
baseWhereClause.cObject {
	10 = TEXT
	10 {
		data = TSFE:fe_user|user|username
		noTrimWrap = | ticket.queue_id IN (SELECT queue_id FROM personal_queues WHERE user_id = (SELECT id FROM users WHERE login = "|")) |
	}
	20 = TEXT
	20 {
		data = TSFE:fe_user|user|username
		noTrimWrap = | AND ticket.user_id IN (1, (SELECT id FROM users WHERE login = "|")) |
	}
	30 = TEXT
	30 {
		data = TSFE:fe_user|user|username
		noTrimWrap = | OR ticket.user_id = (SELECT id FROM users WHERE login = "|") |
	}
}

# Example using  no cObject
baseWhereClause = fe_users.uid <> 0
													]]></EXAMPLE>

													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>

												<ENTRY KEY="baseGroupByClause">
													<DESCRIPTION>Holds the GROUP BY clause of a mysql query without the GROUP BY keyword.</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<COBJ>1</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE>st_continent</EXAMPLE>
												</ENTRY>
											</CHILDREN>
										</ENTRY>

										<ENTRY KEY="backendConfig.typo3">
											<DESCRIPTION>TYPO3 Backend. Inherits the Features from the MySql Backend but the datasource is already configured. The TYPO3 Backend handles enableFields automatically in where clauses.</DESCRIPTION>
											<DATATYPE></DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ>0</COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE><![CDATA[
backendConfig < plugin.tx_ptextlist.prototype.backend.typo3
backendConfig {
	tables (
		static_countries,
		static_territories st_continent,
		static_territories st_subcontinent
	)

	baseFromClause (
		static_countries
		LEFT JOIN static_territories AS st_subcontinent ON (static_countries.cn_parent_tr_iso_nr = st_subcontinent.tr_iso_nr)
		LEFT JOIN static_territories AS st_continent ON (st_subcontinent.tr_parent_iso_nr = st_continent.tr_iso_nr)
	)

	baseWhereClause (
		st_continent.tr_name_en <> ''
		AND st_subcontinent.tr_name_en <> ''
	)
}
											]]></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="tables">
													<DESCRIPTION>Define tables to be used with enable fields. TYPO3 special fields (deleted, hidden) are automatically applied to query.</DESCRIPTION>
													<DATATYPE>Comma seperated list of table names and aliases (optional).</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
static_countries,
static_territories st_continent
													]]></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="useEnableFields">
													<DESCRIPTION>Use enableFields for alle tables that are defined with key tables.</DESCRIPTION>
													<DATATYPE>Boolean</DATATYPE>
													<POSIBLEVALUES>0,1</POSIBLEVALUES>
													<DEFAULT>1</DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE>
													</EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>

										<ENTRY KEY="backendConfig.extbase">
											<DESCRIPTION>Extbase Repository Backend.</DESCRIPTION>
											<PROTOTYPE>plugin.tx_ptextlist.prototype.backend.extbase</PROTOTYPE>
										</ENTRY>
									</VARIANT>
								</ENTRY>
                                <ENTRY KEY="resetOnEmptySubmit">
                                    <DESCRIPTION>If this is set to 1, a list will be reset every time there is no
                                        GP-var data for current request. You can use this switch, if you want a list
                                        to be reset to its default settings every time you open up a page.</DESCRIPTION>
                                    <DATATYPE>Boolean</DATATYPE>
                                    <POSIBLEVALUES>0,1</POSIBLEVALUES>
                                    <DEFAULT>1</DEFAULT>
                                    <COBJ>0</COBJ>
                                    <PROTOTYPE></PROTOTYPE>
                                    <EXAMPLE>
                                    </EXAMPLE>
                                    <CHILDREN></CHILDREN>
                                    <VARIANT></VARIANT>
                                </ENTRY>
								<ENTRY KEY="fields">
									<DESCRIPTION>Defines raw datasource fields, wich can than combined and processed in to table fields.</DESCRIPTION>
									<DATATYPE>Associative array</DATATYPE>
									<COBJ>0</COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="[yourFieldId]">
											<DESCRIPTION>Named definition of a single data field.</DESCRIPTION>
											<DATATYPE>String</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE><![CDATA[
name_local {
	table = static_countries
	field = cn_short_local
	isSortable = 1
}
											]]></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="table">
													<DESCRIPTION>The table, this field belongs to.</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="field">
													<DESCRIPTION>Name of the tables field.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="special">
													<DESCRIPTION>Insert a individual SQL snippet.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="isSortable">
													<DESCRIPTION>Configures if the list can be sorted by the column.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="isVisible">
													<DESCRIPTION>Configures if this column is visible by default. The visibility can be toggled by the columnSelector.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="expandGroupRows">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
                                                <ENTRY KEY="expandGroupRowsSeparator">
                                                    <DESCRIPTION>Use this to implode and later split the rows. This Separator should never be part of the selected string!</DESCRIPTION>
                                                    <DATATYPE>String</DATATYPE>
                                                    <POSIBLEVALUES></POSIBLEVALUES>
                                                    <DEFAULT><![CDATA[<extListSeparator>]]></DEFAULT>
                                                    <COBJ>0</COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE>expandGroupRowsSeparator = SomeStringThatNeverOccursInAnyOfTheSelectedFields</EXAMPLE>
                                                </ENTRY>
											</CHILDREN>
										</ENTRY>
									</CHILDREN>
								</ENTRY>
								<ENTRY KEY="columns">
									<DESCRIPTION>Holds the tables column definitions.</DESCRIPTION>
									<DATATYPE>Array</DATATYPE>
									<COBJ>0</COBJ>
									<PROTOTYPE>plugin.tx_ptextlist.prototype.column.default</PROTOTYPE>
									<EXAMPLE><![CDATA[
10 {
	label = LLL:EXT:pt_extlist/Configuration/TypoScript/Demolist/locallang.xml:cn_short_localColumn
	columnIdentifier =  cn_short_localColumn
	fieldIdentifier =  cn_short_local
	isSortable = 1
}
									]]></EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="10,20,30">
											<DESCRIPTION></DESCRIPTION>
											<CHILDREN>
												<ENTRY KEY="fieldIdentifier">
													<DESCRIPTION>Either a single identifier of a defined field, a comma separated list of identifiers or '*' to use all defined fields.</DESCRIPTION>
													<DATATYPE>fieldIdentifier or *</DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
// use a single field
fieldIdentifier = cn_short_local

// use a list of fields
fieldIdentifier = cn_short_local, name_local

// use every defined field
fieldIdentifier = *
													]]></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="label">
													<DESCRIPTION>A label for this element.</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<COBJ>1</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
// as string
label = country

// as referenc to language file entry
label = LLL:EXT:pt_extlist/Configuration/TypoScript/Demolist/locallang.xml:cn_short_localColumn
													]]></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="renderUserFunctions">
													<DESCRIPTION>A list of userfunctions to render the field value.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
renderUserFunctions {
	10 = EXT:pt_extlist/Resources/Private/UserFunctions/class.tx_ptextlist_demolist_renderer.php:tx_ptextlist_demolist_renderer->iso2CodeRenderer
}
													]]></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="renderTemplate">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE></DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="renderObj">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE></DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="sorting">
													<DESCRIPTION>Define sorting for this column. A single sorting definition consists either of a fieldidentifier or a fieldidentifier followed by direction. The direction can be fixed with adding a '!' in front of the direction. Settings in sorting are overwritten by sortingFields!</DESCRIPTION>
													<DATATYPE>Seperated list of fieldIdentifiers.</DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
// Order by name_local ASC, name_en ASC
sorting = name_local, name_en

// Order by name_local DESC, name_en ASC
sorting = name_local DESC, name_en

// Order by name_local DESC, name_en ASC
// Sorting by name_local is fixed to DESC with the "!" and does not toggle
sorting = name_local !DESC, name_en
]]></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="sortingFields">
													<DESCRIPTION>Define more sophisticated sorting for a column. Fields, directions, forced sorting and label can be defined individually. Settings in sortingsFields overwrite settings in sorting!</DESCRIPTION>
													<DATATYPE>Array</DATATYPE>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
sortingFields {
	10 {
		field = name_en
		label = Name
		direction = asc
		forceDirection = 0
	}
	20 {
		field = name_local
		label = Name (lokal)
		direction = asc
		forceDirection = 0
	}
	30 {
		field = uno_member
		label = UNO member
		direction = asc
		forceDirection = 0
	}
}]]></EXAMPLE>
												<CHILDREN>
													<ENTRY KEY="10,20,30">
													<DESCRIPTION></DESCRIPTION>
														<CHILDREN>
															<ENTRY KEY="field">
																<DESCRIPTION>Field identifier to set up sorting for.</DESCRIPTION>
																<DATATYPE>String</DATATYPE>
															</ENTRY>
															<ENTRY KEY="label">
																<DESCRIPTION>Label to be displayed in column header.</DESCRIPTION>
																<DATATYPE>String</DATATYPE>
															</ENTRY>
															<ENTRY KEY="direction">
																<DESCRIPTION>Direction is used if direction is forced or if column is default sorting column.</DESCRIPTION>
																<DATATYPE>String</DATATYPE>
															</ENTRY>
															<ENTRY KEY="forceDirection">
																<DESCRIPTION>If set to 1, this field is always sorted using direction set above.</DESCRIPTION>
																<DATATYPE>Boolean</DATATYPE>
															</ENTRY>
														</CHILDREN>
													</ENTRY>
												</CHILDREN>
												</ENTRY>
												<ENTRY KEY="sortingImageAsc">
													<DESCRIPTION>Image for ascending ordered column header.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<DEFAULT>EXT:pt_extlist/Resources/Public/List/icon_table_sort_asc.png</DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="sortingImageDesc">
													<DESCRIPTION>Image for descending ordered column header.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<DEFAULT>EXT:pt_extlist/Resources/Public/List/icon_table_sort_desc.png</DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="sortingImageDefault">
													<DESCRIPTION>Image for unordered column header.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<DEFAULT>EXT:pt_extlist/Resources/Public/List/icon_table_sort_default.png</DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="accessGroups">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE></DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
                                                <ENTRY KEY="rawFields">
                                                    <DESCRIPTION>If rawfields is set to 1, the default renderer sets an array of all fields as the value of the column instead of a comma separated list. This array can the now be used in a custom list template.</DESCRIPTION>
                                                    <DATATYPE>Boolean</DATATYPE>
                                                    <COBJ>0</COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE></EXAMPLE>
                                                </ENTRY>
												<ENTRY KEY="cellCSSClass">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE></DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="headerThCssClass">
													<DESCRIPTION>Set CSS class used for th-tag in list header.</DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE><![CDATA[
headerThCssClass = yourCssClass
]]></EXAMPLE>
												</ENTRY>
                                                <ENTRY KEY="cacheRendering">
                                                    <DESCRIPTION>Set to 1 if you want to cache rendering of cells. Can slow down list creation, if values are all different and caching makes no sense.</DESCRIPTION>
                                                    <DATATYPE>Boolean</DATATYPE>
                                                    <POSIBLEVALUES></POSIBLEVALUES>
                                                    <DEFAULT></DEFAULT>
                                                    <COBJ></COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE></EXAMPLE>
                                                    <CHILDREN></CHILDREN>
                                                    <VARIANT></VARIANT>
                                                </ENTRY>
											</CHILDREN>
										</ENTRY>
									</CHILDREN>
								</ENTRY>
								<ENTRY KEY="columnSelector">
									<DESCRIPTION>Configuration for the column selector widget.</DESCRIPTION>
									<DATATYPE>array</DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE>plugin.tx_ptextlist.prototype.columnSelector</PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="enabled">
											<DESCRIPTION>Per default the column selector is disabled. You have to enable the selector to avoid illicit unhiding of columns.</DESCRIPTION>
											<DATATYPE>Boolean</DATATYPE>
											<POSIBLEVALUES>0,1</POSIBLEVALUES>
											<DEFAULT>0</DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="hideDefaultVisibleInSelector">
											<DESCRIPTION>If set to 1, the selector only shows the columns, that are set to visible in the column configuration. If set to 0, all columns are selectable.</DESCRIPTION>
											<DATATYPE>Boolean</DATATYPE>
											<POSIBLEVALUES>0,1</POSIBLEVALUES>
											<DEFAULT>1</DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="persistToSession">
											<DESCRIPTION>Persist the selected columns to session. If the CS is used only to select the columns for printView, it should not persist its state to session permanently because this would effect the original list also.</DESCRIPTION>
											<DATATYPE>Boolean</DATATYPE>
											<POSIBLEVALUES>0,1</POSIBLEVALUES>
											<DEFAULT>1</DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="onlyShowSelectedColumns">
											<DESCRIPTION>If enabled, only selected columns are shown in the list. When disabled, the selected columns are added to already visible columns.</DESCRIPTION>
											<DATATYPE>Boolean</DATATYPE>
											<POSIBLEVALUES>0,1</POSIBLEVALUES>
											<DEFAULT>0</DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="partialPath">
											<DESCRIPTION>Set the partial path</DESCRIPTION>
											<DATATYPE>array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
									</CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="rendererChain">
									<DESCRIPTION>Holds the renderer configuration.</DESCRIPTION>
									<DATATYPE></DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE>plugin.tx_ptextlist.prototype.rendererChain</PROTOTYPE>
									<EXAMPLE><![CDATA[
rendererChain {
	rendererConfigs {
		110 < plugin.tx_ptextlist.prototype.renderer.columnGroup
		110 {
			columnIdentifier = ContinentColumn
			showRowCount = 1
		}
	}
}
]]>
									</EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="enabled">
											<DESCRIPTION></DESCRIPTION>
											<DATATYPE>Boolean</DATATYPE>
											<POSIBLEVALUES>0,1</POSIBLEVALUES>
											<DEFAULT>1</DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="rendererConfigs">
											<DESCRIPTION>A list of chained renderer classes that work on list data structures. The default renderer class uses the column configuration, to render the list of field data in a list of rows and columns. By default this renderer iscalled at position 100. All defined renderer before 100 work on a field data list, while renderer after 100 work on a column list data structure.</DESCRIPTION>
											<DATATYPE>Array (10,20,30)</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE>
											</EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="[yourNumericRendererId]">
													<DESCRIPTION>Configuration of a single renderer.</DESCRIPTION>
													<DATATYPE></DATATYPE>
													<POSIBLEVALUES>10,20,30</POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN>
														<ENTRY KEY="renderClassName">
															<DESCRIPTION>The class name of the renderers php class.</DESCRIPTION>
															<DATATYPE>String</DATATYPE>
															<POSIBLEVALUES></POSIBLEVALUES>
															<DEFAULT></DEFAULT>
															<COBJ></COBJ>
															<PROTOTYPE></PROTOTYPE>
															<EXAMPLE></EXAMPLE>
															<CHILDREN></CHILDREN>
															<VARIANT></VARIANT>
														</ENTRY>
													</CHILDREN>
													<VARIANT></VARIANT>
											</ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
									</CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="aggregateData">
									<DESCRIPTION>Defines aggregates of data fields.</DESCRIPTION>
									<DATATYPE>Associative array</DATATYPE>
									<COBJ>0</COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE><![CDATA[
aggregateData {
	sumPhone {
		fieldIdentifier = phone
		method = sum
	}
}
									]]></EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="[yourAggregateFieldId]">
											<DESCRIPTION>Named definition of a single data field.</DESCRIPTION>
											<DATATYPE>Associative array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ>0</COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE><![CDATA[
sumPhone {
	fieldIdentifier = phone
	method = sum
	scope = query
}
											]]></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="method">
													<DESCRIPTION>Defined aggregate methods.</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<POSIBLEVALUES>min,max,sum,avg</POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
												</ENTRY>
												<ENTRY KEY="scope">
													<DESCRIPTION>The scope for the aggregation can be either set to the current page or to the whole query. Aggregates for the current page are calculated internally without an additonal database query.</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<POSIBLEVALUES>page,query</POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ>0</COBJ>
													<PROTOTYPE></PROTOTYPE>
												</ENTRY>
											</CHILDREN>
										</ENTRY>
									</CHILDREN>
								</ENTRY>
								<ENTRY KEY="aggregateRows">
									<DESCRIPTION>Holds the aggregates columns definitions.</DESCRIPTION>
									<DATATYPE>Associative array</DATATYPE>
									<POSIBLEVALUES>All columnIdentifiers</POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE><![CDATA[
aggregateRows {
	10 {
		phoneColumn {
			aggregateDataIdentifier = sumPhone
			renderObj = TEXT
			renderObj.dataWrap (
				&sum;: <b>{field:sumPhone}</b>
			)
		}
	}
}
]]>
									</EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="[yourColumnId]">
											<DESCRIPTION></DESCRIPTION>
											<DATATYPE></DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="aggregateDataIdentifier">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
									</CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="pager">
									<DESCRIPTION>Holds all pager configuration</DESCRIPTION>
									<DATATYPE>Associative array</DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN>
										<ENTRY KEY="itemsPerPage">
											<DESCRIPTION>Sets the items per page. A value of 0 means to show all entrys.</DESCRIPTION>
											<DATATYPE>Integer</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="pagerConfigs">
											<DESCRIPTION>Holds an array of all defined pagers</DESCRIPTION>
											<DATATYPE>Associative array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="[yourPagerIdentifier]">
													<DESCRIPTION>Identifier of a pager</DESCRIPTION>
													<DATATYPE>String</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN>
														<TYPEREF REF="pager.pagerClassName" KEY="pagerClassName" />
														<TYPEREF REF="pager.templatePath" KEY="templatePath" />
													</CHILDREN>
													<VARIANT>
													<ENTRY KEY="default">
														<DESCRIPTION>Configuration for default pager</DESCRIPTION>
														<DATATYPE></DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE></EXAMPLE>
														<CHILDREN></CHILDREN>
														<VARIANT></VARIANT>
													</ENTRY>
													<ENTRY KEY="delta">
														<DESCRIPTION>Configuration for delta pager. Shows only a configured amount of pagenumbers around the current page.</DESCRIPTION>
														<DATATYPE></DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE></EXAMPLE>
														<CHILDREN></CHILDREN>
														<VARIANT></VARIANT>
													</ENTRY>
													<ENTRY KEY="minimal">
														<DESCRIPTION>Configuration for minimal pager. Shows only Forward and backward links without the page numbers.</DESCRIPTION>
														<DATATYPE></DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE></EXAMPLE>
														<CHILDREN></CHILDREN>
														<VARIANT></VARIANT>
													</ENTRY>
													</VARIANT>
												</ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
									</CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="filters">
								<DESCRIPTION>Holds all filterbox configurations.</DESCRIPTION>
								<DATATYPE>Associative array</DATATYPE>
								<POSIBLEVALUES></POSIBLEVALUES>
								<DEFAULT></DEFAULT>
								<COBJ></COBJ>
								<PROTOTYPE></PROTOTYPE>
								<EXAMPLE></EXAMPLE>
								<CHILDREN>
									<ENTRY KEY="[yourFilterBoxId]">
										<DESCRIPTION></DESCRIPTION>
										<DATATYPE></DATATYPE>
										<POSIBLEVALUES></POSIBLEVALUES>
										<DEFAULT></DEFAULT>
										<COBJ></COBJ>
										<PROTOTYPE>plugin.tx_ptextlist.prototype.filterBox</PROTOTYPE>
										<EXAMPLE></EXAMPLE>
										<CHILDREN>
											<ENTRY KEY="showReset">
												<DESCRIPTION>Show a reset link for all filters of this filterBox.</DESCRIPTION>
												<DATATYPE>Boolean</DATATYPE>
												<POSIBLEVALUES>0,1</POSIBLEVALUES>
												<DEFAULT>1</DEFAULT>
												<COBJ>0</COBJ>
												<PROTOTYPE></PROTOTYPE>
												<EXAMPLE></EXAMPLE>
												<CHILDREN></CHILDREN>
												<VARIANT></VARIANT>
											</ENTRY>
											<ENTRY KEY="showSubmit">
												<DESCRIPTION>Show a submit button for this filterBox.</DESCRIPTION>
												<DATATYPE>Boolean</DATATYPE>
												<POSIBLEVALUES>0,1</POSIBLEVALUES>
												<DEFAULT>1</DEFAULT>
												<COBJ>0</COBJ>
												<PROTOTYPE></PROTOTYPE>
												<EXAMPLE></EXAMPLE>
												<CHILDREN></CHILDREN>
												<VARIANT></VARIANT>
											</ENTRY>
											<ENTRY KEY="submitToPage">
												<DESCRIPTION>If this is set to a PID or page identifier, the form for this filterbox is directly submitted to this page. This can be helpful, if you do not need a validation of filter, as we don't need a redirect then (faster response times).</DESCRIPTION>
												<DATATYPE>string|</DATATYPE>
												<POSIBLEVALUES></POSIBLEVALUES>
												<DEFAULT></DEFAULT>
												<COBJ>0</COBJ>
											</ENTRY>
											<ENTRY KEY="redirectOnSubmit">
												<DESCRIPTION>Redirects to given page id, controller and action if filter submits. Does not redirect if filter does not validate. You always have to set an action and a controller, if you want to redirect to another page only! Use fake names, if there are no controllers / actions you can addresse.</DESCRIPTION>
												<DATATYPE></DATATYPE>
												<POSIBLEVALUES></POSIBLEVALUES>
												<DEFAULT></DEFAULT>
												<COBJ></COBJ>
												<PROTOTYPE></PROTOTYPE>
												<EXAMPLE><![CDATA[
redirectOnSubmit{
	pageId = 10
	controller = List
	action = list
}
											]]></EXAMPLE>
												<CHILDREN>
													<ENTRY KEY="pageId">
														<DESCRIPTION>Id of page that you want to redirect to, after filterbox submits (and validates").</DESCRIPTION>
														<DATATYPE>int</DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE></EXAMPLE>
														<CHILDREN></CHILDREN>
														<VARIANT></VARIANT>
													</ENTRY>
													<ENTRY KEY="controller">
														<DESCRIPTION>Name of controller that sould be called after filterbox submits (and validates!).</DESCRIPTION>
														<DATATYPE>string</DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE></EXAMPLE>
														<CHILDREN></CHILDREN>
														<VARIANT></VARIANT>
													</ENTRY>
													<ENTRY KEY="action">
														<DESCRIPTION>Name of action that should be called on destination page after filterbod submits (and validates).</DESCRIPTION>
														<DATATYPE>string</DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE></EXAMPLE>
														<CHILDREN></CHILDREN>
														<VARIANT></VARIANT>
													</ENTRY>
												</CHILDREN>
												<VARIANT></VARIANT>
											</ENTRY>
											<ENTRY KEY="excludeFilters">
												<DESCRIPTION>Given filters are excluded from filtering of this filterbox. If filters are set here, they are not respected, if this filterbox is submitted. Don't mix up this setting with filter.excludeFilters setting!</DESCRIPTION>
												<DATATYPE>Comma-separated list of filterboxIdentifier.filterIdentifier</DATATYPE>
												<POSIBLEVALUES></POSIBLEVALUES>
												<DEFAULT></DEFAULT>
												<COBJ></COBJ>
												<PROTOTYPE></PROTOTYPE>
												<EXAMPLE><![CDATA[
excludeFilters = filterbox1.filterIdentifier1, filterbox2.filterIdentifier1
											]]></EXAMPLE>
											</ENTRY>
											<ENTRY KEY="filterConfigs">
												<DESCRIPTION>Holds the configuration of the filters of this filter box.</DESCRIPTION>
												<DATATYPE>Array</DATATYPE>
												<POSIBLEVALUES>10,20,30...</POSIBLEVALUES>
												<DEFAULT></DEFAULT>
												<COBJ></COBJ>
												<PROTOTYPE></PROTOTYPE>
												<EXAMPLE></EXAMPLE>
												<CHILDREN>
													<ENTRY KEY="[yourNumericFilterId]">
														<DESCRIPTION></DESCRIPTION>
														<DATATYPE></DATATYPE>
														<POSIBLEVALUES></POSIBLEVALUES>
														<DEFAULT></DEFAULT>
														<COBJ></COBJ>
														<PROTOTYPE></PROTOTYPE>
														<EXAMPLE/>
														<CHILDREN>
															<ENTRY KEY="size">
																<DESCRIPTION>Define the size of the string field.</DESCRIPTION>
																<DATATYPE>int</DATATYPE>
																<POSIBLEVALUES/>
																<DEFAULT></DEFAULT>
																<COBJ>0</COBJ>
																<PROTOTYPE></PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN></CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="maxLength">
																<DESCRIPTION>Define the maximum length of the string field.</DESCRIPTION>
																<DATATYPE>int</DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ>0</COBJ>
																<PROTOTYPE></PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN></CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
															<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
															<TYPEREF REF="filter.label" KEY="label" />
															<TYPEREF REF="filter.description" KEY="description" />
															<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
															<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
															<TYPEREF REF="filter.partialPath" KEY="partialPath" />
															<TYPEREF REF="filter.invert" KEY="invert" />
															<TYPEREF KEY="filter.breadCrumbString" REF="breadCrumbString" />
															<TYPEREF KEY="filter.hidden" REF="hidden" />
														</CHILDREN>
														<VARIANT>
															<ENTRY KEY="String">
																<DESCRIPTION>Shows a string filter.</DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.string</PROTOTYPE>
																<EXAMPLE><![CDATA[
10 < plugin.tx_ptextlist.prototype.filter.string
10 {
	filterIdentifier = firstNameSearch
	label = Firstname
	fieldIdentifier = firstName
}
																]]></EXAMPLE>
																<CHILDREN>
                                                                    <ENTRY KEY="exactMatch">
                                                                        <DESCRIPTION>If set to 1 the filter queries the field by key="value" instead of key like "%value%"</DESCRIPTION>
                                                                        <DATATYPE>Int</DATATYPE>
                                                                        <POSIBLEVALUES></POSIBLEVALUES>
                                                                        <DEFAULT>0</DEFAULT>
                                                                        <COBJ></COBJ>
                                                                        <PROTOTYPE></PROTOTYPE>
                                                                        <EXAMPLE></EXAMPLE>
                                                                        <CHILDREN></CHILDREN>
                                                                        <VARIANT></VARIANT>
                                                                    </ENTRY>
																	<ENTRY KEY="orToken">
																		<DESCRIPTION><![CDATA[
If set to any value, the filterValue is separated at this token, and the single pieces are combined with SQL OR. To separate at a blank, use pipes to define it (orToken = | |).
																		]]></DESCRIPTION>
																		<DATATYPE>String</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT>0</DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE>
																			<![CDATA[
Typoscript:

10 {
		orToken = |||
		andToken = &
}

Search String: test
Generated SQL: table1.field1 LIKE "%test%"

Search String: test | test2 & test3
Generated SQL: (table1.field1 LIKE "%test%") OR ((table1.field1 LIKE "%test2%") AND (table1.field1 LIKE "%test3%"))

																		]]>
																		</EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="andToken">
																		<DESCRIPTION>If set to any value, the filterValue is separated at this token, and the single pieces are combined with SQL AND. To separate at a blank, use pipes to define it (orToken = | |).</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT>0</DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="fullText">
																<DESCRIPTION>Shows a filter to do a fullText query. The execution is database specific. If you are using a MySQL database, you have to add a fullText index to the relevant fields first.</DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.fullText</PROTOTYPE>
																<EXAMPLE><![CDATA[
10 < plugin.tx_ptextlist.prototype.filter.fullText
10 {
	filterIdentifier = fullText
	label = Full Text Search
	fieldIdentifier = extkey,title,description,authorname,uploadcomment
}
																]]></EXAMPLE>
																<CHILDREN>
																	<ENTRY KEY="minWordLength">
																		<DESCRIPTION>The minimum word length, depends on databackend/backend server configuration. The default configuration for mysql servers is a minimum length of 4. Adjust this value to the according configuration of your server to get a error message if the length of the provided search word is below the this value.</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT>4</DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="booleanMode">
																		<DESCRIPTION>This is a MySQL specific value. If it is set to 1, the query is executed in boolean mode.</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT>0</DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="booleanModeWrapWithStars">
																		<DESCRIPTION>If the parameter booleanMode is set to 1 and booleanModeWrapWithStars is set to 1 the searchWord is wrapped with stars (if not already done by the user). The effect is, that matches in substrings are also posible.</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT>0</DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="Select">
																<DESCRIPTION></DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.select</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<ENTRY KEY="dataProviderClassName">
																		<DESCRIPTION>ClassName of a dataProvider class that delivers options to select.</DESCRIPTION>
																		<VARIANT>
																			<ENTRY KEY="ExplicitSQLQuery">
																				<DESCRIPTION>This data provider allows you to execute a separate query to fetch the options.</DESCRIPTION>
																				<EXAMPLE><![CDATA[

# Example 1
selectFilter < plugin.tx_ptextlist.prototype.filter.select {
	partialPath = Filter/Options/SelectFilter
	filterClassName = Tx_PtExtlist_Domain_Model_Filter_SelectFilter
	dataProviderClassName = Tx_PtExtlist_Domain_Model_Filter_DataProvider_ExplicitSQLQuery
	optionsSqlQuery {
		select = cn_short_local
		from = static_countries
		where = delete = 0
		orderBy =
		groupBy =
		limit =
	}
}
																			]]></EXAMPLE>
																				<CHILDREN>
																					<ENTRY KEY="select">
																						<DESCRIPTION>The SELECT part of the query.</DESCRIPTION>
																					</ENTRY>
																					<ENTRY KEY="from">
																						<DESCRIPTION>The FROM part of the query.</DESCRIPTION>
																					</ENTRY>
																					<ENTRY KEY="where">
																						<DESCRIPTION>The WHERE part of the query.</DESCRIPTION>
																					</ENTRY>
																					<ENTRY KEY="orderBy">
																						<DESCRIPTION>The ORDER BY part of the query.</DESCRIPTION>
																					</ENTRY>
																					<ENTRY KEY="groupBy">
																						<DESCRIPTION>The GROUP BY part of the query.</DESCRIPTION>
																					</ENTRY>
																					<ENTRY KEY="limit">
																						<DESCRIPTION>The LIMIT part of the query.</DESCRIPTION>
																					</ENTRY>
																				</CHILDREN>
																			</ENTRY>
																		</VARIANT>
																		<VARIANT>
																			<ENTRY KEY="ExplicitData">
																				<DESCRIPTION>This data provider allows you to define options for a select filter.</DESCRIPTION>
																				<EXAMPLE><![CDATA[

  filters {
  		filterbox {
  			filterConfigs {
  				10 < plugin.tx_ptextlist.prototype.filter.select
  				10 {
  					label = Abgeschlossen?
  					filterIdentifier = finishedFilter
  					fieldIdentifier = finished
 
  					inactiveOption = Alle
  					inactiveValue = ----alle----
 
  					dataProviderClassName = Tx_PtExtlist_Domain_Model_Filter_DataProvider_ExplicitData
 
  					options {
  						10 {
  							key = 0
  							value = nein
  						}
  						20 {
  							key = 1
 						 	value = ja
  						}
  					}
 
 				 	renderObj {
  						dataWrap = {field:allDisplayFields}
  					}
 
  					showRowCount = 0
  				}
  			}
  		}
  }
																			]]></EXAMPLE>
																				<CHILDREN>
																					<ENTRY KEY="options">
																						<DESCRIPTION>A key/value list of options</DESCRIPTION>
																					</ENTRY>
																				</CHILDREN>
																			</ENTRY>
																		</VARIANT>
																	</ENTRY>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.fieldIdentifier" KEY="fieldIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.multiple" KEY="multiple" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.showRowCount" KEY="showRowCount" />
																	<TYPEREF REF="filter.submitOnChange" KEY="submitOnChange" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF REF="filter.options" KEY="options" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="Checkbox">
																<DESCRIPTION></DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.checkbox</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.fieldIdentifier" KEY="fieldIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.multiple" KEY="multiple" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.showRowCount" KEY="showRowCount" />
																	<TYPEREF REF="filter.submitOnChange" KEY="submitOnChange" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF REF="filter.options" KEY="options" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="Button">
																<DESCRIPTION>Renders a filter with buttons.</DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.button</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.fieldIdentifier" KEY="fieldIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.showRowCount" KEY="showRowCount" />
																	<TYPEREF REF="filter.submitOnChange" KEY="submitOnChange" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF REF="filter.options" KEY="options" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="radiobutton">
																<DESCRIPTION></DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.checkbox</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.fieldIdentifier" KEY="fieldIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.multiple" KEY="multiple" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.showRowCount" KEY="showRowCount" />
																	<TYPEREF REF="filter.submitOnChange" KEY="submitOnChange" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF REF="filter.options" KEY="options" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="firstLetter">
																<DESCRIPTION></DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.firstLetter</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
                                                                    <ENTRY KEY="addLettersIfMissing">
                                                                        <DESCRIPTION>Comma separated list of letters that have to be in the selection even if no data with this letter was found in the query.</DESCRIPTION>
                                                                        <DATATYPE>CSV</DATATYPE>
                                                                        <POSIBLEVALUES>CSV of letters</POSIBLEVALUES>
                                                                        <DEFAULT></DEFAULT>
                                                                        <COBJ></COBJ>
                                                                        <PROTOTYPE></PROTOTYPE>
                                                                        <EXAMPLE><![CDATA[
addLettersIfMissing = A,B,C,D,E,F,G,H,I,J,K,L,N,M,O,P,Q,R,S,T,U,V.W,X,Y,Z
																		]]></EXAMPLE>
                                                                        <CHILDREN></CHILDREN>
                                                                        <VARIANT></VARIANT>
                                                                    </ENTRY>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.fieldIdentifier" KEY="fieldIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.showRowCount" KEY="showRowCount" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="dateSelect">
																<DESCRIPTION><![CDATA[
																	Renders a list of date definitions like "August 2011" to select entries in a given file range.
																]]></DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.dateSelectList</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<ENTRY KEY="fieldIdentifier">
																		<DESCRIPTION>The fieldIdentifier for a timeSpanFilter (every filter that derives from the abstractTimeSpanFilter) can be set by two different ways.
																			1. by a comma seperated list of fieldIdentifer as normal.
																			2. by defining a 2-dimensional list of start and end fields that determines the start and end of an event. See the example for details.</DESCRIPTION>
																		<DATATYPE>CSV, Array</DATATYPE>
																		<POSIBLEVALUES>FieldIdentifier</POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE><![CDATA[
# Type 1: define a single date-field
fieldIdentifier = tstamp, crdate

# Type 2: defined start and end identifier
fieldIdentifier {
	10 {
		start = eventStartDate
		end = eventEndDate
	}
	20 {
		start = eventStartDate2
		end = eventEndDate2
	}
}
																		]]></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	 <ENTRY KEY="defaultValue">
																		<DESCRIPTION>This filter requires a start and an end value as default.</DESCRIPTION>
																		<DATATYPE>Array</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE><![CDATA[
defaultValue {
	start = 1234567890
	end = 234567891
}
																		]]></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="dbTimeFormat">
																		<DESCRIPTION>The filter converts the the time values to the format defined with dbTimeFormat.</DESCRIPTION>
																		<DATATYPE>String</DATATYPE>
																		<POSIBLEVALUES><![CDATA[
																			For MySql the possible Values are:
																			UnixTimesTamp (Integer):   U
																			DATETIME: 	Y-m-d H:i:s
																			DATE: 	Y-m-d
																			TIMESTAMP: 	Y-m-d H:i:s
																			TIME: 	H:i:s
																			YEAR: 	Y
																		]]></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE><![CDATA[
dbTimeFormat = U
																		]]></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="dateIteratorStart">
																		<DESCRIPTION>Used for dateIterator dataProvider. Start date in unix timestamp format.</DESCRIPTION>
																		<DATATYPE>Integer</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ>1</COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE>
																		</EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="dateIteratorEnd">
																		<DESCRIPTION>Used for dateIterator dataProvider. End date in unix timestamp format.</DESCRIPTION>
																		<DATATYPE>Integer</DATATYPE>
																		<POSIBLEVALUES>

																		</POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE>

																		</EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="dateIteratorIncrement">
																		<DESCRIPTION>The step size to increment the dates.</DESCRIPTION>
																		<DATATYPE>String</DATATYPE>
																		<POSIBLEVALUES><![CDATA[
																			'h': by hour
																			'i': by minute
																			's': by second
																			'd': by day
																			'm': by month
																			'y': by year
																		]]></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE><![CDATA[
dateIteratorIncrement = m
																		]]></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="dateIteratorFormat">
																		<DESCRIPTION>How the labels for the timeSpan is rendered. You hav to use PHP strftime format to render labels in the according language.</DESCRIPTION>
																		<DATATYPE>String</DATATYPE>
																		<POSIBLEVALUES>Strftime format string.</POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE><![CDATA[
dateIteratorFormat = %m.%Y
																		]]></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.showRowCount" KEY="showRowCount" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="tagcloud">
																<DESCRIPTION></DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.tagcloud</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<ENTRY KEY="maxItems">
																		<DESCRIPTION>Maximum of items to show.</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="minColor">
																		<DESCRIPTION>Minimum Color</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE>minColor = #1c448d</EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="maxColor">
																		<DESCRIPTION>Maximum Color</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE>maxColor = #b8cffa</EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="minSize">
																		<DESCRIPTION>Minimum size of tags in pixel.</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<ENTRY KEY="maxSize">
																		<DESCRIPTION>Maximum size of tags in pixel</DESCRIPTION>
																		<DATATYPE>Int</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																	<TYPEREF REF="filter.filterIdentifier" KEY="filterIdentifier" />
																	<TYPEREF REF="filter.fieldIdentifier" KEY="fieldIdentifier" />
																	<TYPEREF REF="filter.label" KEY="label" />
																	<TYPEREF REF="filter.description" KEY="description" />																	
																	<TYPEREF REF="filter.partialPath" KEY="partialPath" />
																	<TYPEREF REF="filter.filterClassName" KEY="filterClassName" />
																	<TYPEREF REF="filter.defaultValue" KEY="defaultValue" />
																	<TYPEREF REF="filter.accessGroups" KEY="accessGroups" />
																	<TYPEREF REF="filter.invert" KEY="invert" />
																	<TYPEREF REF="filter.invertable" KEY="invertable" />
																	<TYPEREF REF="filter.displayFields" KEY="displayFields" />
																	<TYPEREF REF="filter.excludeFilters" KEY="excludeFilters" />
																	<TYPEREF REF="filter.inactiveOption" KEY="inactiveOption" />
																	<TYPEREF REF="filter.inactiveValue" KEY="inactiveValue" />
																	<TYPEREF KEY="filter.hidden" REF="hidden" />
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
															<ENTRY KEY="Proxy">
																<DESCRIPTION>A proxy filter is not displayed. It uses a filter from an other list defined by the proxy path and sets the result constraint to the given field.</DESCRIPTION>
																<DATATYPE></DATATYPE>
																<POSIBLEVALUES></POSIBLEVALUES>
																<DEFAULT></DEFAULT>
																<COBJ></COBJ>
																<PROTOTYPE>plugin.tx_ptextlist.prototype.filter.proxy</PROTOTYPE>
																<EXAMPLE></EXAMPLE>
																<CHILDREN>
																	<ENTRY KEY="proxyPath">
																		<DESCRIPTION>Path to a filter from an other list. The path has the format [listId].[filterBoxId].[filterId]</DESCRIPTION>
																		<DATATYPE>String</DATATYPE>
																		<POSIBLEVALUES></POSIBLEVALUES>
																		<DEFAULT></DEFAULT>
																		<COBJ></COBJ>
																		<PROTOTYPE></PROTOTYPE>
																		<EXAMPLE></EXAMPLE>
																		<CHILDREN></CHILDREN>
																		<VARIANT></VARIANT>
																	</ENTRY>
																</CHILDREN>
																<VARIANT></VARIANT>
															</ENTRY>
														</VARIANT>
													</ENTRY>
												</CHILDREN>
												<VARIANT></VARIANT>
											</ENTRY>
										</CHILDREN>
										<VARIANT></VARIANT>
									</ENTRY>
								</CHILDREN>
								<VARIANT></VARIANT>
							</ENTRY>
								<ENTRY KEY="headerPartial">
									<DESCRIPTION>Path to the header partial.</DESCRIPTION>
									<DATATYPE>String</DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE><![CDATA[
// Fluid style. Relative to pt_extlist/Resources/Private/Partials/
// points to pt_extlist/Resources/Private/Partials/List/SpecialPartial.html
headerPartial = List/SpecialPartial

// Extension relative path
headerPartial = EXT:pt_extlist_special/Resources/Private/Partials/SpecialPartial.html
									]]></EXAMPLE>
									<CHILDREN></CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="bodyPartial">
									<DESCRIPTION>Path to the body partial.</DESCRIPTION>
									<DATATYPE>String</DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE><![CDATA[
// Fluid style. Relative to pt_extlist/Resources/Private/Partials/
// points to pt_extlist/Resources/Private/Partials/List/SpecialPartial.html
bodyPartial = List/SpecialPartial

// Extension relative path
bodyPartial = EXT:pt_extlist_special/Resources/Private/Partials/SpecialPartial.html
									]]></EXAMPLE>
									<CHILDREN></CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
								<ENTRY KEY="agregateRowsPartial">
									<DESCRIPTION>Path to the aggregate row partial.</DESCRIPTION>
									<DATATYPE>String</DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE><![CDATA[
// Fluid style. Relative to pt_extlist/Resources/Private/Partials/
// points to pt_extlist/Resources/Private/Partials/List/SpecialPartial.html
agregateRowsPartial = List/SpecialPartial

// Extension relative path
agregateRowsPartial = EXT:pt_extlist_special/Resources/Private/Partials/SpecialPartial.html
									]]></EXAMPLE>
									<CHILDREN></CHILDREN>
									<VARIANT></VARIANT>
								</ENTRY>
							</CHILDREN>
						</ENTRY>
					</CHILDREN>
				</ENTRY>
				<ENTRY KEY="export">
					<DESCRIPTION>Export configuration templates for different export types.</DESCRIPTION>
					<DATATYPE>String</DATATYPE>
					<POSIBLEVALUES></POSIBLEVALUES>
					<DEFAULT></DEFAULT>
					<COBJ></COBJ>
					<PROTOTYPE></PROTOTYPE>
					<EXAMPLE></EXAMPLE>
					<CHILDREN></CHILDREN>
					<VARIANT>
						<ENTRY KEY="export">
							<DESCRIPTION>Export configuration section.</DESCRIPTION>
							<DATATYPE>Array</DATATYPE>
							<POSIBLEVALUES></POSIBLEVALUES>
							<DEFAULT></DEFAULT>
							<COBJ></COBJ>
							<PROTOTYPE></PROTOTYPE>
							<EXAMPLE></EXAMPLE>
							<CHILDREN>
								<ENTRY KEY="exportConfigs">
									<DESCRIPTION>Export configuration templates for different export types.</DESCRIPTION>
									<DATATYPE>Array</DATATYPE>
									<POSIBLEVALUES></POSIBLEVALUES>
									<DEFAULT></DEFAULT>
									<COBJ></COBJ>
									<PROTOTYPE></PROTOTYPE>
									<EXAMPLE></EXAMPLE>
									<CHILDREN></CHILDREN>
									<VARIANT>
										<ENTRY KEY="csvExport">
											<DESCRIPTION>Export the list as CSV.</DESCRIPTION>
											<DATATYPE>Array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="delimiter">
													<DESCRIPTION>Sets the column delimiter.</DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>;</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="outputEncoding">
													<DESCRIPTION>Sets the output encoding.</DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>ISO-8859-1</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="fluidTemplateExport">
											<DESCRIPTION>Export the listData in any representation defined by fluid syntax.</DESCRIPTION>
											<DATATYPE>Array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN></CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="excelExport">
											<DESCRIPTION>Excel export</DESCRIPTION>
											<DATATYPE>Array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE></EXAMPLE>
											<CHILDREN>
                                                <ENTRY KEY="stripTags">
                                                    <DESCRIPTION>Remove HTML Tags from content.</DESCRIPTION>
                                                    <DATATYPE>Boolean</DATATYPE>
                                                    <POSIBLEVALUES></POSIBLEVALUES>
                                                    <DEFAULT>1</DEFAULT>
                                                    <COBJ></COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE></EXAMPLE>
                                                    <CHILDREN></CHILDREN>
                                                    <VARIANT></VARIANT>
                                                </ENTRY>
                                                <ENTRY KEY="doBodyCellStyling">
                                                    <DESCRIPTION>Use the cell style configuration from the column configuration to style the body part of the list. This tremendously decreases the render performance. Therefore it is not suitable for big lists > 10k lines.</DESCRIPTION>
                                                    <DATATYPE>Boolean</DATATYPE>
                                                    <POSIBLEVALUES></POSIBLEVALUES>
                                                    <DEFAULT>0</DEFAULT>
                                                    <COBJ></COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE></EXAMPLE>
                                                    <CHILDREN></CHILDREN>
                                                    <VARIANT></VARIANT>
                                                </ENTRY>
                                                <ENTRY KEY="renderFilterStates">
                                                    <DESCRIPTION>Render a block with the filter states of the list to the table header.</DESCRIPTION>
                                                    <DATATYPE>Boolean</DATATYPE>
                                                    <POSIBLEVALUES></POSIBLEVALUES>
                                                    <DEFAULT>0</DEFAULT>
                                                    <COBJ></COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE></EXAMPLE>
                                                    <CHILDREN></CHILDREN>
                                                    <VARIANT></VARIANT>
                                                </ENTRY>
                                                <ENTRY KEY="renderFreeText">
                                                    <DESCRIPTION>If set, render this free text to the head of the list.</DESCRIPTION>
                                                    <DATATYPE>String</DATATYPE>
                                                    <POSIBLEVALUES></POSIBLEVALUES>
                                                    <DEFAULT></DEFAULT>
                                                    <COBJ>1</COBJ>
                                                    <PROTOTYPE></PROTOTYPE>
                                                    <EXAMPLE></EXAMPLE>
                                                    <CHILDREN></CHILDREN>
                                                    <VARIANT></VARIANT>
                                                </ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
										<ENTRY KEY="pdfExport">
											<DESCRIPTION>Uses the domPdf library to export the list data as pdf document.</DESCRIPTION>
											<DATATYPE>Array</DATATYPE>
											<POSIBLEVALUES></POSIBLEVALUES>
											<DEFAULT></DEFAULT>
											<COBJ></COBJ>
											<PROTOTYPE></PROTOTYPE>
											<EXAMPLE><![CDATA[
pdfExport {
	viewClassName = Tx_PtExtlist_View_Export_PdfListView
	fileExtension = pdf
	templatePath = typo3conf/ext/pt_extlist/Resources/Private/Templates/Export/PDF/Default.html
	cssFilePath =  EXT:pt_extlist/Resources/Public/CSS/Export/Pdf.css

	headerPartial = Export/PDF/ListHeader
	bodyPartial = Export/PDF/ListBody
	aggregateRowsPartial = Export/PDF/AggregateRows

	// DOMPDF Settings
	dompdfSourcePath = EXT:pt_dompdf/Classes/dompdf
	paperSize = a4
	paperOrientation =  portrait
}
]]>
											</EXAMPLE>
											<CHILDREN>
												<ENTRY KEY="viewClassName">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>Tx_PtExtlist_View_Export_PdfListView</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="fileExtension">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>pdf</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="templatePath">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>typo3conf/ext/pt_extlist/Resources/Private/Templates/Export/PDF/Default.html</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="cssFilePath">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>EXT:pt_extlist/Resources/Public/CSS/Export/Pdf.css</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="headerPartial">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>Export/PDF/ListHeader</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="bodyPartial">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>Export/PDF/ListBody</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="aggregateRowsPartial">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>Array</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="dompdfSourcePath">
													<DESCRIPTION>Path to the domPDF Sources.</DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT></DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
													</ENTRY>
												<ENTRY KEY="paperSize">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES>a0-a10, b0-b10, c0-c10, ... </POSIBLEVALUES>
													<DEFAULT>a4</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
												<ENTRY KEY="paperOrientation">
													<DESCRIPTION></DESCRIPTION>
													<DATATYPE>string</DATATYPE>
													<POSIBLEVALUES></POSIBLEVALUES>
													<DEFAULT>portrait</DEFAULT>
													<COBJ></COBJ>
													<PROTOTYPE></PROTOTYPE>
													<EXAMPLE></EXAMPLE>
													<CHILDREN></CHILDREN>
													<VARIANT></VARIANT>
												</ENTRY>
											</CHILDREN>
											<VARIANT></VARIANT>
										</ENTRY>
									</VARIANT>
								</ENTRY>
							</CHILDREN>
							<VARIANT></VARIANT>
						</ENTRY>
					</VARIANT>
				</ENTRY>
			</CHILDREN>
		</ENTRY>
	</TSREF>
</DOC>
